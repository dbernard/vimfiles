#!/bin/bash

function usage()
{
    cat <<EOF
Usage: `basename "$0"` /path/to/vim/source/x.y [ACTION+]
       `basename "$0"` x.y [ACTION+]

In second case, x.y is searched in "standard" download locations.

Final directory must be of form major.minor (e.g., 7.2).

Valid ACTIONs are:
  update            - use "hg pull -u" to update hg/ directory
  unpack            - unpack Vim sources below CWD
  configure         - configure Vim with standard build options
  build             - build Vim and create binary tarball

If no ACTIONs are specified, defaults to unpack configure build.

Run from a suitable build location (e.g., ~/build).
EOF
}

function setup()
{
    VERSION="$1"
    if [ -z "$VERSION" ]; then
        usage
        exit
    fi
    for DIR in "$VERSION" \
        "$VERSION" \
        "$HOME/download/programming/vim/$VERSION" \
        "/tools/software/vim/$VERSION"; do
        if [ -d "$DIR" ]; then
            break
        fi
    done

    if [ ! -d "$DIR" ]; then
        echo "Cannot find source directory $DIR"
        usage
        exit
    fi

    if ! echo $VERSION | grep -q '^[0-9]\+\.[0-9]\+$'; then
        echo "Bad version in $DIR"
        usage
        exit
    fi
    echo "Vim $VERSION sources in $DIR"
    VIMNAME=vim-$VERSION
    VIMDIR=$VIMNAME
    echo "Vim build directory in $VIMDIR"
}

function update()
{
    if [ -d "$DIR/hg" ]; then
        hg pull -u "$DIR/hg"
    else
        echo "Cannot update; missing $dir/hg"
    fi
}

function patchlevel()
{
    grep -A 3 '^static int included_patches' "$VIMDIR"/src/version.c | 
        tail -n 1 | perl -pe 's/^\s*(\d+).*/$1/'
}

# Return list of matching paths, reverse-sorted by version number.
# listVersions /path/to/vim-7.3. .tar.bz2
# ==>
# /path/to/vim-7.3.100.tar.bz2
# /path/to/vim-7.3.99.tar.bz2
# ...
# /path/to/vim-7.3.2.tar.bz2
# /path/to/vim-7.3.1.tar.bz2
function listVersions()
{
    prefix="$1"
    suffix="$2"

    for i in $prefix[0-9]{,[0-9]{,[0-9]{,[0-9]}}}$suffix; do
        echo "${i:${#prefix}}"
    done | sort -rn | while read tail; do
        echo "$prefix$tail"
    done
}

function latestVersion()
{
    prefix="$1"
    suffix="$2"

    largest=`listVersions "$prefix" "$suffix" | head -1`
    echo "$largest"
}

function unpack()
{
    if [ -d "$VIMDIR" ]; then
        echo "Must remove directory $VIMDIR manually before continuing"
        exit
    fi
    echo "Unpacking Vim $VERSION..."
    if [ -d "$DIR/hg" ]; then
        echo "  Extracting source from hg to $VIMDIR..."
        hg archive --repository "$DIR/hg" "$VIMDIR"
        SRCTAR="$VIMDIR/$VIMDIR.`patchlevel`.tar.bz2"
        echo "  Creating source archive $SRCTAR..."
        hg archive --repository "$DIR/hg" --prefix "$VIMDIR" "$SRCTAR"
    else
        TARPREFIX="$DIR/$VIMNAME."
        suffix=".tar.bz2"
        TARNAME=`latestVersion "$TARPREFIX" "$suffix"`
        if [ -n "$TARNAME" -a -f "$TARNAME" ]; then
            echo "  Unpacking $TARNAME..."
            tar -jxf "$TARNAME"
        else
            echo "Error: couldn't find $VIMNAME sources; exiting"
            exit
        fi
    fi
}

function configure()
{
    echo "Configuring in $VIMDIR..."
    (
        cd $VIMDIR; 
        ./configure \
            --quiet \
            --with-features=huge    \
            --enable-perlinterp     \
            --enable-pythoninterp     \
            --enable-tclinterp     \
            --enable-rubyinterp     \
            --enable-cscope     \
            --with-compiledby=drmikehenry@drmikehenry.com     \

    )
}

function build()
{
    echo "Building in $VIMDIR..."
    PATCHLEVEL=`patchlevel`
    VIMFULLNAME="$VIMNAME.$PATCHLEVEL"
    (
        TARNAME="$VIMFULLNAME.i386.tar.gz"
        cd $VIMDIR
        echo "  Removing DESTDIR..."
        rm -rf DESTDIR
        mkdir DESTDIR
        echo "  Compiling $VIMFULLNAME..." && \
            make && \
            echo "  Installing in DESTDIR..." && \
            make install DESTDIR=`pwd`/DESTDIR && \
            find DESTDIR -type d -print0 | xargs -0 chmod go-w && \
            echo "  Creating tar from DESTDIR" && \
            tar -C DESTDIR --owner=root --group=root -zcf $TARNAME . && \
            echo "  Created archive $VIMDIR/$TARNAME"
    )
}

# Trap any exiting, setup to exit on any failures.
trap "trap - EXIT; echo Aborting" EXIT 
set -e

setup "$1"
shift
if [ -z "$1" ]; then
    unpack
    configure
    build
else
    while [ -n "$1" ]; do
        $1
        shift
    done
fi

# Reset exit trap.
trap - EXIT
